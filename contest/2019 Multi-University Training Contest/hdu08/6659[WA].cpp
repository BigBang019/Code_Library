// #pragma GCC optimize(3)
#include <bits/stdc++.h>
using namespace std;
#define fi first
#define sc second
#define pb push_back
#define mp make_pair
#define LEN(X) strlen(X)
#define SZ(X) ((int)(X).size())
#define ALL(X) (X).begin(), (X).end()
#define FOR(I, N) for (int I = 0; I < (N); ++I)
#define FORD(I, N) for (int I = N; ~I; --I)
#define REP(I, A, B) for (int I = A; I <= (B); ++I)
#define REPD(I, B, A) for (int I = B; I >= A; --I)
#define FORS(I, S) for (int I = 0; S[I]; ++I)
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> pi;
typedef pair<ll, ll> pl;
const int N = 3e5 + 5;

void R(int x) {}
vector<ll> vis[10];
template <class T, class... U>
void R(int x, T head, U... tail)
{
    vis[x].pb(head);
    R(x, tail...);
}

int main()
{
    R(1, 0, 1, 199981, 199982, 199983, 199984, 199985, 199986, 199987, 199988, 199989, 199990, 200000, 200001, 1599981, 1599982, 1599983, 1599984, 1599985, 1599986, 1599987, 1599988, 1599989, 1599990, 2600000, 2600001, 13199998, 35000000, 35000001, 35199981, 35199982, 35199983, 35199984, 35199985, 35199986, 35199987, 35199988, 35199989, 35199990, 35200000, 35200001, 117463825, 500000000, 500000001, 500199981, 500199982, 500199983, 500199984, 500199985, 500199986, 500199987, 500199988, 500199989, 500199990, 500200000, 500200001, 501599981, 501599982, 501599983, 501599984, 501599985, 501599986, 501599987, 501599988, 501599989, 501599990, 502600000, 502600001, 513199998, 535000000, 535000001, 535199981, 535199982, 535199983, 535199984, 535199985, 535199986, 535199987, 535199988, 535199989, 535199990, 535200000, 535200001, 1111111110);
    R(2, 0, 28263827, 35000000, 242463827, 500000000, 528263827, 535000000, 10000000000, 10028263827, 10035000000, 10242463827, 10500000000, 10528263827, 10535000000);
    R(3, 0, 371599983, 371599984, 371599985, 371599986, 371599987, 371599988, 371599989, 371599990, 371599991, 371599992, 500000000, 59471736170, 10000000000, 10371599983, 10371599984, 10371599985, 10371599986, 10371599987, 10371599988, 10371599992, 10500000000, 20000000000, 20371599992, 20500000000);
    R(4, 0, 499999984, 499999985, 499999986, 499999987, 499999988, 499999989, 499999990, 499999991, 499999992, 499999993, 500000000, 10000000000, 10499999984, 10499999985, 10499999986, 10499999987, 10499999988, 10499999989, 10500000000, 20000000000, 20500000000, 30000000000, 30500000000);
    R(5, 0, 10000000000, 20000000000, 30000000000, 40000000000);
    R(6, 0, 9500000000, 9628399986, 9628399987, 9628399988, 9628399989, 9628399990, 9628399991, 9628399992, 9628399993, 9628399994, 9628399995, 10000000000, 19500000000, 19628399986, 19628399987, 19628399988, 19628399989, 19628399995, 20000000000, 29500000000, 29628399995, 30000000000, 39500000000, 39628399995, 40000000000, 49500000000, 49628399995, 50000000000, 59500000000, 59628399995);
    R(7, 0, 9465000000, 9471736170, 9500000000, 9757536170, 9965000000, 9971736170, 10000000000, 19465000000, 19471736170, 19500000000, 19757536170, 19965000000, 19971736170, 20000000000, 29465000000, 29471736170, 29500000000, 29757536170, 29965000000, 29971736170, 30000000000, 39465000000, 39471736170, 39500000000, 39757536170, 39965000000, 39971736170, 40000000000, 49465000000, 49471736170, 49500000000, 49757536170, 49965000000, 49971736170, 50000000000, 59465000000, 59471736170, 59500000000, 59757536170, 59965000000, 59971736170, 60000000000, 69465000000, 69471736170, 69500000000, 69757536170, 69965000000, 69971736170);
    R(8, 0, 9465000000, 9486799989, 9486799990, 9486799991, 9486799992, 9486799993, 9486799994, 9486799995, 9486799996, 9486799997, 9497400000, 9498399989, 9498399990, 9498399991, 9498399992, 9498399993, 9498399994, 9498399995, 9498399996, 9498399997, 9500000000, 9882536171, 9965000000, 9986799997, 9997400000, 9998399997, 10000000000, 19465000000, 19486799997, 19497400000, 19498399997, 19500000000, 19882536171, 19965000000, 19998399997, 19986799997, 19997400000, 19998399997, 20000000000, 29465000000, 29486799997, 29497400000, 29997400000, 29498399997, 29500000000, 29882536171, 29965000000, 29986799997, 29997400000, 29998399997, 30000000000, 39465000000, 39486799997, 39497400000, 39498399997, 39500000000, 39882536171, 39965000000, 39986799997, 39997400000, 39998399997, 40000000000, 49465000000, 49486799997, 49497400000, 49498399997, 49500000000, 49882536171, 49965000000, 49986799997, 49997400000, 49998399997, 50000000000, 59465000000, 59486799997, 59497400000, 59500000000, 59882536171, 59965000000, 59986799997, 59997400000, 59998399997, 60000000000, 69465000000, 69486799997, 69497400000, 69498399997, 69500000000, 69882536171, 69965000000, 69986799997, 69998399997, 69997400000, 69998399997, 70000000000, 79465000000, 79486799997, 79498399997, 79500000000, 79882536171, 79965000000, 79986799997, 79997400000, 79998399997);
    R(9, 0, 10000000000, 20000000000, 30000000000, 40000000000, 50000000000, 60000000000, 70000000000, 80000000000);
    int _;
    for (scanf("%d", &_); _; _--)
    {
        int d;
        ll x;
        cin >> d >> x;
        for (int i = vis[d].size() - 1; ~i; i--)
        {
            if (vis[d][i] <= x)
            {
                cout << vis[d][i] << endl;
                break;
            }
        }
    }
    return 0;
}
